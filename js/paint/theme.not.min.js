registerPaint(
  'BackgroundTheme',
  class {
    constructor() {
      const themes = {
        blue: ['#4285f4', '#4069DD', '#77bdff'],
        green: ['#34a853', '#349351', '#57bb8a'],
        red: ['#ea4335', '#900000', '#ff5252'],
        yellow: ['#ffcc50', '#fbbc05'],
        grey: ['#999999', '#666666', '#d9d9d9']
      };
      const backgrounds = {
        blue: themes.blue,
        green: themes.green,
        red: ['#ea4335', '#980000', '#ff5252'],
        yellow: ['#fbbc05', '#bf9000', '#ffcc50'],
        grey: themes.grey
      };
      this.bottoms = themes;
      this.backgrounds = backgrounds;
    }

    static get inputProperties() {
      return ['--theme-color', '--theme-background-type'];
    }

    drawPath(ctx, obj) {
      ctx.beginPath();

      for (const [key, points] of Object.entries(obj)) {
        if (key === 's') {
          ctx.moveTo(points[0], points[1]);
        } else if (key === 'f') {
          ctx.fillStyle = points;
          ctx.fill();
        } else {
          ctx.lineTo(points[0], points[1]);
        }
      }
    }

    paint(ctx, size, properties) {
      // Get fill color from property
      const theme = properties
        .get('--theme-color')
        .toString()
        .trim();
      let type = properties
        .get('--theme-background-type')
        .toString()
        .trim()
        .toLowerCase();

      if (type !== 'footer' && type !== 'divider') {
        type = 'footer';
      }

      if (type === 'footer') {
        const colors = this.bottoms[theme]; // Triangle 0

        const t1 = {
          s: [0, size.height - 132],
          p1: [0.513 * size.width, size.height],
          p2: [0, size.height],
          f: colors[0]
        };
        const t2 = {
          s: [size.width, size.height - 152],
          p1: [0.209 * size.width, size.height - 78],
          p2: [0.209 * size.width, size.height],
          p3: [size.width, size.height],
          f: colors[1]
        };
        this.drawPath(ctx, t2);
        this.drawPath(ctx, t1);
      } else {
        const colors = this.backgrounds[theme];
        const bkg1 = {
          s: [0, 0],
          p1: [0, size.height],
          p2: [size.width, size.height],
          p3: [size.width, 0],
          p4: [0, 0],
          f: colors[0]
        };
        const bkg2 = {
          s: [0.358 * size.width, 0],
          p1: [size.width, 0.424511545 * size.height],
          p2: [size.width, 0],
          f: colors[1]
        };
        const bkg3 = {
          s: [0.375 * size.width, size.height],
          p1: [0.808 * size.width, 0.296 * size.height],
          p2: [size.width, 0.296 * size.height],
          p3: [size.width, size.height],
          f: colors[2]
        };
        this.drawPath(ctx, bkg1);
        this.drawPath(ctx, bkg3);
        this.drawPath(ctx, bkg2);
      }
    }
  }
);
//# sourceMappingURL=MaterialBackground.js.map
