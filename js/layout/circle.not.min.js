registerLayout(
  'circle',
  class {
    static get inputProperties() {
      return ['--item-size', '--padding', '--angle'];
    }

    *intrinsicSizes() {}
    *layout(children, edges, constraints, styleMap) {
      const childFragments = yield children.map(child => {
        return child.layoutNextFragment({
          fixedInlineSize: styleMap.get('--item-size')
        });
      });

      const items = childFragments.length;
      const angle = 360 / items;
      const offset = ((90 - styleMap.get('--angle').value) * Math.PI) / 180;

      const θ = (angle * Math.PI) / 180;
      const p = styleMap.get('--padding').value;
      const r = styleMap.get('--item-size').value + p;

      let autoBlockSize = 0;
      const blockStack = [0];
      for (const [i, childFragment] of childFragments.entries()) {
        const x = r * Math.cos(θ * i - offset);
        const y = r * Math.sin(θ * i - offset);

        childFragment.inlineOffset = x + constraints.fixedInlineSize / 2 - childFragment.inlineSize / 2;
        childFragment.blockOffset = y + r;

        if (y >= blockStack[blockStack.length - 1]) {
          autoBlockSize = y + r * 1.6;
          blockStack.push(y);
        }
      }

      return { autoBlockSize, childFragments };
    }
  }
);

/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
